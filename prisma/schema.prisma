// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Tweet{
    id String @id @default(uuid())
    userId String
    content String
    createdAt DateTime @default(now())
//specific for song functionality
    trackId String
    trackName String
    trackArtist String
    trackImage String
    trackUri String
    albumId String
    artistId String
    likes Like[]
    user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
    @@unique([createdAt, id])


}

model Like{
    userId String 
    tweetId String 
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    Tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    
    @@id([userId, tweetId])
    @@index([userId])
    @@index([tweetId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    accessToken String   @unique
    userId       String
    expires      DateTime
    refreshToken String?
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    //not next auth
    tweets       Tweet[]
    likes        Like[]
    followers User[] @relation(name: "Followers")
    follows User[] @relation(name: "Followers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}